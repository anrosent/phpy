#!/usr/bin/env python3
import http.server, http.cookies, cgi, argparse
from capture import process
from collections import defaultdict

# A simple HTTP server that serves templated Python code
# a la PHP - embedded code blocks, where `print`ing 
# sends output into the space occupied by that block
class PhPyHttpServer(http.server.SimpleHTTPRequestHandler):

    # Save these when we interpret file to send proper header
    # so we don't have to reprocess file to send content
    file_len = 0
    content = None
    POST    = '' 
    GET     = defaultdict(str)
    COOKIES = defaultdict(str)

    # Override to preprocess file through PHPy interpreter
    def copyfile(self, source, outputfile):
        outputfile.write(self.content.encode('utf-8'))

    # Don't let it send the file length per os.stat()
    def send_header(self, keyword, value):
        if keyword == 'Content-Length':
            value = self.file_len

        super(PhPyHttpServer, self).send_header(keyword, value)

    # Interpret file before we send headers so we know the length
    def send_head(self):

        #TODO: don't circumvent 404 handling in http.server.SimpleHTTPServer
        self.content = process(open(self.translate_path(self.path), 'r').read(),  {\
                '_POST' : self.POST,
                '_GET'  : self.GET,
                '_COOKIES' : self.COOKIES,
        })
        self.file_len = len(self.content)
        return super(PhPyHttpServer, self).send_head()

    # Override do_GET method of SimpleHttpServer to set env vars
    def do_GET(self):
        self.set_envs()
        super(PhPyHttpServer, self).do_GET()

    # No difference between GET and POST for processing
    def do_POST(self):
        self.do_GET()

    def set_envs(self):

        # GET query params
        query_ix = self.path.rfind('?')
        if query_ix >= 0:
            query_s = self.path[query_ix+1:]
        else:
            query_s = ''
    
        self.GET = cgi.parse_qs(query_s)
        
        # Get POST data
        # copped this from http.server.CGIHTTPRequestHandler.run_cgi
        try:
            data_len = int(self.headers.get('content-length'))
        except (TypeError, ValueError):
            data_len = 0

        if data_len > 0 and self.command.lower():
            data = self.rfile.read(data_len).decode('utf-8')
        else:
            data = ''

        # TODO: select loop to clear rfile data
        self.POST = data

        # Get cookies from header
        cookie_str = ', '.join(self.headers.get_all('cookie', []))

        # Create cookie and parse string
        cookie = http.cookies.SimpleCookie()
        cookie.load(cookie_str)

        # Set to var for interpreted script
        self.COOKIES = cookie


# Runs PHPy server locally on the given port -- same args as http.server
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--cgi', action='store_true',
                            help='Run as CGI Server')
    parser.add_argument('--bind', '-b', default='', metavar='ADDRESS',
                             help='Specify alternate bind address '
                              '[default: all interfaces]')
    parser.add_argument('port', action='store',
                             default=8000, type=int,
                             nargs='?',
                             help='Specify alternate port [default: 8000]')
    args = parser.parse_args()

    http.server.test(HandlerClass=PhPyHttpServer, port=args.port, bind=args.bind)
